# Intelligent Cleanup System Configuration
# This file configures the safety-first cleanup behavior

version: 1.0
mode: conservative  # Options: conservative, balanced, aggressive, interactive

# Confidence thresholds determine automatic vs manual actions
confidence:
  auto_threshold: 0.85      # Automatically clean items above this confidence
  prompt_threshold: 0.60    # Prompt user for items above this threshold
  report_only: 0.59         # Only report items below prompt threshold
  
# Patterns to always preserve (never delete)
preserve_patterns:
  # Test-related patterns
  - "test_*"
  - "*_test"
  - "*_spec"
  - "mock*"
  - "fixture*"
  - "stub*"
  
  # Framework patterns
  - "@*"              # Decorators (Angular, TypeScript, Python)
  - "use*"            # React hooks
  - "*Controller"     # MVC controllers
  - "*Service"        # Service classes
  - "*Provider"       # Providers (Angular, NestJS)
  
  # Dynamic loading indicators
  - "*Handler"        # Event/request handlers
  - "*Loader"         # Dynamic loaders
  - "*Plugin"         # Plugin files
  - "*Extension"      # Extension points
  
  # Performance variants
  - "*_optimized"
  - "*_fast"
  - "*_cached"
  - "*_memo*"

# Age thresholds (in days) before considering cleanup
age_thresholds:
  commented_code: 90      # Don't touch comments newer than this
  unused_functions: 180   # Functions must be older to consider unused
  todo_comments: 365      # TODOs must be very old
  empty_files: 30         # Empty files need some age
  
# Language-specific rules
languages:
  javascript:
    dynamic_import_patterns:
      - "require\\(.+\\$\\{.+\\}.*\\)"
      - "import\\(.+\\$\\{.+\\}.*\\)"
    preserve_files:
      - "index.js"
      - "index.ts"
      - ".eslintrc.js"
      
  python:
    dynamic_import_patterns:
      - "__import__"
      - "importlib\\.import_module"
    preserve_files:
      - "__init__.py"
      - "setup.py"
      - "conftest.py"
      
  go:
    preserve_files:
      - "go.mod"
      - "go.sum"
      - "doc.go"
      
# Safety mechanisms
safety:
  dry_run: true           # Always preview changes first
  backup: true            # Create backups before cleanup
  atomic_commits: true    # Each cleanup in separate commit
  test_between: true      # Run tests between cleanup operations
  max_changes: 50         # Limit changes per run
  
# Duplicate code handling
duplicates:
  similarity_threshold: 0.95   # How similar code must be (0.0-1.0)
  min_lines: 10               # Minimum lines to consider duplicate
  verify_behavior: true       # Test behavioral equivalence
  preserve_performance: true  # Keep performance-optimized variants
  
# Framework-specific preservation rules
frameworks:
  react:
    preserve:
      - "components/*"
      - "use*"            # Hooks
      - "*Context"        # Context providers
      
  angular:
    preserve:
      - "@Component"
      - "@Injectable"
      - "@NgModule"
      - "*\\.module\\.ts$"
      
  vue:
    preserve:
      - "*\\.vue$"
      - "components/*"
      
  express:
    preserve:
      - "middleware/*"
      - "routes/*"
      - "*Router"
      
# Reporting configuration
reporting:
  verbose: true
  show_confidence: true
  show_rationale: true
  group_by_type: true
  save_report: true
  report_path: ".cleanup-reports"
  
# Learning and improvement
learning:
  enabled: true
  track_decisions: true
  decision_log: ".cleanup-decisions.log"
  adjust_confidence: true
  share_patterns: false    # Share patterns with team
  
# Integration options
integrations:
  git:
    check_blame: true
    respect_gitignore: true
    
  ci:
    fail_on_low_confidence: false
    report_to_pr: true
    
  ide:
    show_hints: true
    quick_actions: true

# Custom rules (project-specific)
custom_rules:
  # Example: Preserve specific business logic patterns
  # - pattern: "*Calculator"
  #   reason: "Core business logic"
  #   confidence_modifier: -0.5
  
  # Example: More aggressive on certain directories
  # - path: "src/legacy/*"
  #   confidence_modifier: +0.2
  #   reason: "Legacy code scheduled for removal"